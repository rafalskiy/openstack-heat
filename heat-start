#!/bin/bash

echo "Removing heat DB..."
rm /var/lib/heat/heat.sqlite

echo "Updating conf file..."
configparse.py

export OS_USERNAME=admin
export OS_PASSWORD=${ADMIN_PASS}
export OS_TENANT_NAME=admin
export OS_AUTH_URL=http://${KEYSTONE_HOST_IP}:35357/v2.0

endpoint=`openstack endpoint list -f csv -q |grep heat`

if [ -z "$endpoint" ]
then
    echo ">>>>>>> Endpoint not yet created"
    echo "Creating database"
    mysql \
        -h${MYSQL_HOST_IP} \
        -u${MYSQL_USER} \
        -p${MYSQL_PASSWORD} \
        -e "CREATE DATABASE heat;"

    mysql \
        -h${MYSQL_HOST_IP} \
        -u${MYSQL_USER} \
        -p${MYSQL_PASSWORD} \
        -e "GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'localhost' \
            IDENTIFIED BY '${HEAT_DBPASS}';"

    mysql \
        -h${MYSQL_HOST_IP} \
        -u${MYSQL_USER} \
        -p${MYSQL_PASSWORD} \
        -e "GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'%' \
            IDENTIFIED BY '${HEAT_DBPASS}'"


    echo "Creating Heat user..."
    openstack user create --password ${HEAT_PASS} heat

    openstack role add --project service --user heat admin

    openstack role create heat_stack_owner

    openstack role add --project demo --user demo heat_stack_owner

    openstack role create heat_stack_user

    openstack service create --type orchestration \
        --description "Orchestration" heat

    openstack service create --type cloudformation \
        --description "Orchestration" heat-cfn

    openstack endpoint create \
        --publicurl http://${NOVA_HOST_IP}:8004/v1/%\(tenant_id\)s \
        --internalurl http://${NOVA_HOST_IP}:8004/v1/%\(tenant_id\)s \
        --adminurl http://${NOVA_HOST_IP}:8004/v1/%\(tenant_id\)s \
        --region RegionOne \
        orchestration

    openstack endpoint create \
        --publicurl http://${NOVA_HOST_IP}:8000/v1 \
        --internalurl http://${NOVA_HOST_IP}:8000/v1 \
        --adminurl http://${NOVA_HOST_IP}:8000/v1 \
        --region RegionOne \
        cloudformation

    heat-keystone-setup-domain \
        --stack-user-domain-name heat_user_domain \
        --stack-domain-admin heat_domain_admin \
        --stack-domain-admin-password ${HEAT_DOMAIN_PASS}

else

    if [[ $endpoint == *"ERROR"* ]]
    then
        echo ">>>>>>> Cannot connect to Keystone"
        exit
    else
        echo ">>>>>>> Endpoint already created"
    fi
fi

echo "Updating database tables"
heat-manage db_sync

echo "Starting heat using supervisord..."
exec /usr/bin/supervisord -n
